; The shader for full one textured block

; Uniforms
.fvec projection[4], modelView[4]
.fvec lightVec, lightHalfVec, lightClr, material[4]
.fvec textureProp
.alias mat_amb material[0]
.alias mat_dif material[1]
.alias mat_spe material[2]
.alias mat_emi material[3]

; Constants
; constf basecolor(0.99, 0.6, 0.0, 1.0)
.constf basecolor(1.0, 1.0, 1.0, 1.0)
.constf myconst(0.0, 1.0, -1.0, -0.5)
.constf twopow(2.0, 4.0, 8.0, 16.0)
.constf posdec(5.0, 10.0, 0.0, 0.0)

.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias	minusone myconst.zzzz ; Vector full of minus ones

; Functions registers
.alias param1 r10
.alias param2 r11
.alias param3 r12
.alias var1 r13
.alias var2 r14
.alias return r15

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1
.alias innrm v2

; RSHIFT = param1 -> value , param2 -> n_bits , return -> yes
.proc rshift
	ex2 var1, param2 			; var1 = 2 ^ n_bits
	rcp var1, var1 				; var1 = 1 / var1
	mul return, param1, var1 	; return = value / var1
	flr return, return 			; return = floor(return)
.end

; LSHIFT = param1 -> value , param2 -> n_bits , return -> yes
.proc lshift
	ex2 var1, param2 			; var1 = 2 ^ n_bits
	mul return, param1, var1 	; return = value * var1
.end

; SUBSTRACT = param1 -> a , param2 -> b , return -> yes
.proc subs
	mov var1, minusone 			; var1 = -1
	mul var1, param2, var1 		; var1 = b * var1
	add return, param1, var1 	; return = a - var1
.end

.proc main
	; ------ Decode position ------
		; r0 = decodedPosition
		; r1 = Component multiplied
		; r2 = Substracted component position value
		; r3 = exponent
	; Decode z
	mov param1, inpos.x 					; param1 = inpos
	mov param2, posdec.y 					; param2 = 10
	call rshift 							; return = inpos >> 10
	mov r0.z, return 						; decodedPosition.z = return

	; Substract z << 10 from inpos
	ex2 r3, posdec.y						; exponent = 2 ^ 10
	mul r1, r0.z, r3	 					; zmul = z * exponent

	mov param1, inpos.x 					; param1 = inpos
	mov param2, r1 							; param2 = zmul
	call subs 								; return = inpos - zmul
	mov r2, return 							; inposxy = inpos - zmul

	; Decode y
	mov param1, r2 							; param1 = inposxy
	mov param2, posdec.x 					; param2 = 5
	call rshift 							; return = inposxy >> 5
	mov r0.y, return 						; decodedPosition.y = return

	; Substract y << 5 from inposxy -> x
	ex2 r3, posdec.x						; exponent = 2 ^ 5
	mul r1, r0.y, r3 						; ymul = decodedPosition.y * exponent

	mov param1, r2 							; param1 = inposxy
	mov param2, r1 							; param2 = ymul
	call subs 								; return = inposxy - ymul
	mov r0.x, return 						; decodedPosition.x = return

	; Force the w component of inpos to be 1.0
	mov r0.w, ones

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

    ; outtex = intex
	mov r0, intex
	mov r1, ones
	mul r1.x, textureProp.x, r0.x
	mul r1.y, textureProp.y, r0.y
	mov outtc0, r1

	; ------ Decode normals ------
		; r0 = decodedNormals
		; r1 = Component multiplied
		; r2 = Substracted component normal value
		; r3 = exponent
	; Decode z
	mov param1, innrm.x 					; param1 = innrm
	mov param2, twopow.y 					; param2 = 4
	call rshift 							; return = innrm >> 4
	mov r0.z, return 						; decodedNormals.z = return

	; Substract z << 4 from innrm
	ex2 r3, twopow.y						; exponent = 2 ^ 4 = 16
	mul r1, r0.z, r3	 					; zmul = z * exponent

	mov param1, innrm.x 					; param1 = innrm
	mov param2, r1 							; param2 = zmul
	call subs 								; return = innrm - zmul
	mov r2, return 							; innrmxy = innrm - zmul

	; Decode y
	mov param1, r2 							; param1 = innrmxy
	mov param2, twopow.x 					; param2 = 2
	call rshift 							; return = innrmxy >> 2
	mov r0.y, return 						; decodedNormals.y = return

	; Substract y << 2 from innrmxy -> x
	ex2 r3, twopow.x						; exponent = 2 ^ 2 = 4
	mul r1, r0.y, r3 						; ymul = decodedNormals.y * exponent

	mov param1, r2 							; param1 = innrmxy
	mov param2, r1 							; param2 = ymul
	call subs 								; return = innrmxy - ymul
	mov r0.x, return 						; decodedNormals.x = return

	; decodedNormals -= 1
	mov param1, r0 							; param1 = decodedNormals
	mov param2, ones 						; param2 = 1
	call subs 								; return = decodedNormals - 1
	mov r0, return 							; decodedNormals = return

	; Transform the normal vector with the modelView matrix
	; r1 = normalize(modelView * innrm)
	mov r0.w,   zeros
	dp4 r1.x,   modelView[0], r0
	dp4 r1.y,   modelView[1], r0
	dp4 r1.z,   modelView[2], r0
	mov r1.w,   zeros
	dp3 r2,     r1, r1 ; r2 = x^2+y^2+z^2 for each component
	rsq r2,     r2     ; r2 = 1/sqrt(r2)  ''
	mul r1,     r2, r1 ; r1 = r1*r2

	; Calculate the diffuse level (r0.x) and the shininess level (r0.y)
	; r0.x = max(0, -(lightVec * r1))
	; r0.y = max(0, (-lightHalfVec[i]) * r1) ^ 2
	dp3 r0.x, lightVec,      r1
	add r0.x, zeros,         -r0
	dp3 r0.y, -lightHalfVec, r1
	max r0,   zeros,         r0
	mul r0.y, r0,            r0

	; Accumulate the vertex color in r1, initializing it to the emission color
	mov r1, mat_emi

	; r1 += specularColor * lightClr * shininessLevel
	mul r2, lightClr, r0.yyyy
	mad r1, r2, mat_spe, r1

	; r1 += diffuseColor * lightClr * diffuseLevel
	mul r2, lightClr, r0.xxxx
	mad r1, r2, mat_dif, r1

	; r1 += ambientColor * lightClr
	mov r2, lightClr
	mad r1, r2, mat_amb, r1

	; outclr = clamp r1 to [0,1]
	mov r3, basecolor
	mul r1, r1, r3
	min outclr, ones, r1

	; We're finished
	end
.end